<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序媛的生活</title>
  
  <subtitle>自娱自乐</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://agclyy.github.io/"/>
  <updated>2019-05-18T09:07:59.000Z</updated>
  <id>https://agclyy.github.io/</id>
  
  <author>
    <name>agclyy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次NullPointerException</title>
    <link href="https://agclyy.github.io/2019/05/18/%E8%AE%B0%E4%B8%80%E6%AC%A1NullPointerException/"/>
    <id>https://agclyy.github.io/2019/05/18/记一次NullPointerException/</id>
    <published>2019-05-18T08:19:04.000Z</published>
    <updated>2019-05-18T09:07:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>记一次线上问题的坑，NullPointException</p><p>代码中age字段是Integer 可以传null，但set方法中用int基本类型接收的，虽然不知道这种诡异的代码是如何存在的，但实际线上就是存在了</p><p>下文的测试代码中 正常set null值，编译不会通过，但是添加三目运算的那种实现就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNullPointException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        Integer age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//        person.setAge(null);</span></span><br><span class="line">        person.setAge(<span class="string">"aa"</span>.equals(<span class="string">"aa"</span>) ? <span class="keyword">null</span> : <span class="number">4</span>);</span><br><span class="line">        person.setName(<span class="string">"aa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g35ktz0dhhj31cw09edhp.jpg" alt="https://ws1.sinaimg.cn/large/006tNc79gy1g35ktz0dhhj31cw09edhp.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记一次线上问题的坑，NullPointException&lt;/p&gt;
&lt;p&gt;代码中age字段是Integer 可以传null，但set方法中用int基本类型接收的，虽然不知道这种诡异的代码是如何存在的，但实际线上就是存在了&lt;/p&gt;
&lt;p&gt;下文的测试代码中 正常set null值
      
    
    </summary>
    
    
      <category term="问题排查" scheme="https://agclyy.github.io/tags/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>redis 部署</title>
    <link href="https://agclyy.github.io/2019/05/03/redis-%E9%83%A8%E7%BD%B2/"/>
    <id>https://agclyy.github.io/2019/05/03/redis-部署/</id>
    <published>2019-05-03T03:57:08.000Z</published>
    <updated>2019-05-04T06:29:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、下载安装"><a href="#1、下载安装" class="headerlink" title="1、下载安装"></a>1、下载安装</h3><p>​    可直接官网下载 ： <a href="https://redis.io/download" target="_blank" rel="noopener">https://redis.io/download</a></p><p>​    目前最新稳定版本是：redis-5.0.4</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# wget http://download.redis.io/releases/redis-5.0.4.tar.gz</span><br><span class="line">[root@localhost test]# tar xzf redis-5.0.4.tar.gz</span><br><span class="line">[root@localhost test]# cd redis-5.0.4/</span><br><span class="line">[root@localhost test]# make</span><br></pre></td></tr></table></figure><h3 id="2、启动测试"><a href="#2、启动测试" class="headerlink" title="2、启动测试"></a>2、启动测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-5.0.4]# ./src/redis-server</span><br></pre></td></tr></table></figure><p>​    再启动一个终端，进行客户端的连接测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost src]<span class="comment"># ./redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> <span class="built_in">test</span> aa</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get <span class="built_in">test</span></span><br><span class="line"><span class="string">"aa"</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="3、常见问题"><a href="#3、常见问题" class="headerlink" title="3、常见问题"></a>3、常见问题</h3><ul><li><p>异常一</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make[2]: cc: Command not found</span><br></pre></td></tr></table></figure><p>异常原因：没有安装gcc</p><p>解决方案：<code>yum install gcc-c++</code></p></li><li><p>异常二</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zmalloc.h:51:31: error:jemalloc/jemalloc.h: No such file or directory</span><br></pre></td></tr></table></figure><p>异常原因：一些编译依赖或原来编译遗留出现的问题</p><p>解决方案：<code>make distclean</code>。清理一下，然后再<code>make</code>.</p></li><li><p>异常三</p><p>在make成功以后，需要make test。在make test出现异常。couldn’t execute “tclsh8.5”: no such file or directory</p><p>异常原因：没有安装tcl</p><p>解决方案：<code>yum install -y tcl</code>。</p></li></ul><p><strong>redis安装依赖包包括：gcc，jemalloc，tcl，cloog-ppl，cpp，mpfr，ppl</strong></p><h3 id="4、哨兵模式配置"><a href="#4、哨兵模式配置" class="headerlink" title="4、哨兵模式配置"></a>4、哨兵模式配置</h3><p>​    copy三份redis.conf的配置，主节点配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bind 0.0.0.0  #使非本机可以访问</span><br><span class="line">protected-mode no #保护模式关闭，3.2版本之前的注释该行</span><br><span class="line">port 6379   #访问端口</span><br><span class="line">daemonize yes  #redis启动后台运行</span><br><span class="line">pidfile "/var/run/redis_6379.pid"  #后台启动时将pid写入文件</span><br><span class="line">databases 16  #数据库个数默认16</span><br><span class="line">dir "/apps/svr/test/redis-5.0.4"  #数据文件保持地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置主节点的ip,端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> masterauth &lt;master-password&gt;</span></span><br><span class="line">masterauth "testpassword" #主备通信时告诉备需要密码</span><br><span class="line">requirepass "testpassword" #设置登陆需要的密码</span><br></pre></td></tr></table></figure><p>​    从节点配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bind 0.0.0.0  #使非本机可以访问</span><br><span class="line">protected-mode no #保护模式关闭，3.2版本之前的注释该行</span><br><span class="line">port 6380   #访问端口</span><br><span class="line">daemonize yes  #redis启动后台运行</span><br><span class="line">pidfile "/var/run/redis_6380.pid"  #后台启动时将pid写入文件</span><br><span class="line">databases 16  #数据库个数默认16</span><br><span class="line">dir "/apps/svr/test/redis-5.0.4"  #数据文件保持地址</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line">slaveof 127.0.0.1 6379</span><br><span class="line"><span class="meta">#</span><span class="bash">slave-read-only yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置主节点的ip,端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> masterauth &lt;master-password&gt;</span></span><br><span class="line">masterauth "testpassword" #主备通信时告诉备需要密码</span><br><span class="line">requirepass "testpassword" #设置登陆需要的密码</span><br></pre></td></tr></table></figure><p>配置好以后，启动redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-5.0.4]# nohup ./src/redis-server redis_6381.conf</span><br><span class="line">[root@localhost redis-5.0.4]# ps aux|grep redis</span><br><span class="line">root     37286  0.0  0.0  60696  2000 ?        Ss   14:01   0:00 sudo -u redis redis-server /etc/redis.conf</span><br><span class="line">systemd+ 37438  0.2  0.0  43712  5724 ?        Sl   14:01   0:00 redis-server *:6379</span><br><span class="line">root     38153  0.1  0.0 156440  5188 pts/0    Sl   14:02   0:00 ./src/redis-server 127.0.0.1:6379</span><br><span class="line">root     38607  0.1  0.0 156440  8064 ?        Ssl  14:02   0:00 ./src/redis-server 127.0.0.1:6380</span><br><span class="line">root     38781  0.0  0.0 156440  9876 ?        Ssl  14:02   0:00 ./src/redis-server 127.0.0.1:6381</span><br><span class="line">root     38935  0.0  0.0 112704   964 pts/0    S+   14:03   0:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><p>查看启动后主节点信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-5.0.4]# ./src/redis-cli -h 127.0.0.1 -p 6379 </span><br><span class="line">127.0.0.1:6379&gt; auth testpassword</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get test</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; set test aa</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; info</span><br></pre></td></tr></table></figure><p>info输入后我们可以看到这样的输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=376,lag=1</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=376,lag=1</span><br><span class="line">master_replid:63e7bfb237d100f9f68b1342a71b10ce31f5a380</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:376</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:376</span><br></pre></td></tr></table></figure><p>可以看到role是master 两个slaves </p><p>主、从节点sentinel配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protected-mode no #3.2版本之前的注释该行</span><br><span class="line">port 26379</span><br><span class="line"><span class="meta">#</span><span class="bash">sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">主redis地址端口 <span class="comment">#设置访问密码</span></span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2 </span><br><span class="line">sentinel auth-pass mymaster testpassword</span><br></pre></td></tr></table></figure><p>启动sentinel，查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-5.0.4]# ./src/redis-sentinel sentinel_6379.conf &amp;</span><br><span class="line">[root@localhost redis-5.0.4]# ./src/redis-sentinel sentinel_6380.conf &amp;</span><br><span class="line">[root@localhost redis-5.0.4]# ./src/redis-sentinel sentinel_6381.conf &amp;</span><br></pre></td></tr></table></figure><p>报错No such master with specified name  原来我配置文件的位置弄错了，下面两句的配置需要放在</p><p>sentinel.conf的大致位置如下，之前我直接配置在了文件最末端</p><p><code>sentinel monitor mymaster 127.0.0.1 6379 2</code><br><code>sentinel auth-pass mymaster testpassword</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Number of milliseconds the master (or any attached replica or sentinel) should</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> be unreachable (as <span class="keyword">in</span>, not acceptable reply to PING, continuously, <span class="keyword">for</span> the</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> specified period) <span class="keyword">in</span> order to consider it <span class="keyword">in</span> S_DOWN state (Subjectively</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Down).</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default is 30 seconds.</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> sentinel parallel-syncs &lt;master-name&gt; &lt;numreplicas&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> How many replicas we can reconfigure to point to the new replica simultaneously</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> during the failover. Use a low number <span class="keyword">if</span> you use the replicas to serve query</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> to avoid that all the replicas will be unreachable at about the same</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> time <span class="keyword">while</span> performing the synchronization with the master.</span></span><br><span class="line">sentinel auth-pass mymaster testpassword</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br></pre></td></tr></table></figure><p>访问sentinel</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-5.0.4]# ./src/redis-cli -p 26379</span><br><span class="line">127.0.0.1:26379&gt; info</span><br><span class="line"><span class="meta">#</span><span class="bash"> Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=ok,address=127.0.0.1:6379,slaves=2,sentinels=3</span><br></pre></td></tr></table></figure><p>可以测试kill主节点，你会发现其中的一个slave变成了master,配置文件的内容也会跟着发生变化</p><p>再启动曾经的master，会自动成为新的master的slave ，配置文件也会更新</p><p>配置主从 新旧版本配置不一样 具体查看redis官网<br>        新版本为：replicaof 127.0.0.1 6379<br>        旧版本为: slaveof 127.0.0.1 6379</p><p>之前配置的是slaveof ，自动修改后成为了 replicaof 127.0.0.1 6380</p><h3 id="5、参考链接-amp-鸣谢"><a href="#5、参考链接-amp-鸣谢" class="headerlink" title="5、参考链接&amp;鸣谢"></a>5、参考链接&amp;鸣谢</h3><ol><li><a href="https://blog.csdn.net/wuliusir/article/details/51598029" target="_blank" rel="noopener">https://blog.csdn.net/wuliusir/article/details/51598029</a></li><li><a href="https://blog.csdn.net/gzh0222/article/details/8482525" target="_blank" rel="noopener">https://blog.csdn.net/gzh0222/article/details/8482525</a></li><li><a href="https://www.cnblogs.com/PatrickLiu/p/8444546.html" target="_blank" rel="noopener">https://www.cnblogs.com/PatrickLiu/p/8444546.html</a></li><li><a href="https://www.cnblogs.com/jaycekon/p/6237562.html" target="_blank" rel="noopener">https://www.cnblogs.com/jaycekon/p/6237562.html</a></li><li><a href="https://blog.csdn.net/weixin_42711549/article/details/83061052" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42711549/article/details/83061052</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、下载安装&quot;&gt;&lt;a href=&quot;#1、下载安装&quot; class=&quot;headerlink&quot; title=&quot;1、下载安装&quot;&gt;&lt;/a&gt;1、下载安装&lt;/h3&gt;&lt;p&gt;​    可直接官网下载 ： &lt;a href=&quot;https://redis.io/download&quot; tar
      
    
    </summary>
    
      <category term="redis" scheme="https://agclyy.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://agclyy.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>github + hexo 搭建个人网站</title>
    <link href="https://agclyy.github.io/2019/05/02/github-hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <id>https://agclyy.github.io/2019/05/02/github-hexo-搭建个人网站/</id>
    <published>2019-05-02T12:26:37.000Z</published>
    <updated>2019-05-04T06:29:58.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><blockquote><p>直接网站下载，安装=&gt;<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p></blockquote></li><li><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><blockquote><p>直接命令 简单快捷：npm install -g hexo-cli</p></blockquote><p>但在我电脑上因为权限出现了错误，fail to execute 。。。修改后命令如下</p><blockquote><p>修改命令为=&gt; npm install -g hexo-cli –unsafe-perm </p></blockquote></li><li><h4 id="github上注册账号"><a href="#github上注册账号" class="headerlink" title="github上注册账号"></a>github上注册账号</h4><blockquote><p>网址：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a>  具体如何注册这边就不阐述了</p><p>然后创建一个respository  <strong>注册名.github.io</strong> 必须这样命名 例如我的是agclyy.github.io</p></blockquote></li></ul><p>接下来就是一路的hexo的命令了，这边为了网站数据不丢失，创建了develop分支，用来存放所有数据</p><p>新建立一个目录，之后的博客都存储与这里：</p><p>家目录下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir gitblog </span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> cd gitblog</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> git clone -b develop https://github.com/agclyy/agclyy.github.io.git</span><br></pre></td></tr></table></figure><p>然后在该目录下创建blog，之后生成的blog文章都存储于此</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir blog</span><br><span class="line"><span class="meta">$</span> cd blog</span><br><span class="line"><span class="meta">$</span> hexo init</span><br><span class="line"><span class="meta">$</span> npm install</span><br><span class="line"><span class="meta">$</span> hexo generate</span><br><span class="line"><span class="meta">$</span> hexo server</span><br></pre></td></tr></table></figure><p>终端输出这些信息就说明OK了,浏览器可以输入，页面就出来啦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><h4 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h4><p>用编辑器打开 blog/ 下的配置文件_config.yml找到：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> </span><br><span class="line"><span class="attr">  repository:</span></span><br></pre></td></tr></table></figure><p>到GitHub的 <strong>注册名.github.io</strong>仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="attr">https://github.com/注册名/注册名.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h4 id="完成部署"><a href="#完成部署" class="headerlink" title="完成部署"></a>完成部署</h4><p>最后一步，快要成功了，键入指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-deployer-git --save</span><br><span class="line"><span class="meta">$</span> hexo generate</span><br><span class="line"><span class="meta">$</span> hexo deploy</span><br></pre></td></tr></table></figure><p>每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行输出大概是这样：INFO  Deploy done: git</p><p>将所有文件提交到git上的develop分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git add .</span><br><span class="line"><span class="meta">$</span> git commit -m "..."</span><br><span class="line"><span class="meta">$</span> git push origin develop</span><br></pre></td></tr></table></figure><h4 id="书写文章"><a href="#书写文章" class="headerlink" title="书写文章"></a>书写文章</h4><p>之后书写文章只需要执行new命令，生成指定名称的文章至 blog\source_posts\文章标题.md 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new "文章标题" #新建文章</span><br></pre></td></tr></table></figure><h4 id="参考资料-amp-鸣谢："><a href="#参考资料-amp-鸣谢：" class="headerlink" title="参考资料&amp;鸣谢："></a>参考资料&amp;鸣谢：</h4><ol><li><a href="https://chaoo.oschina.io/2016/05/23/Hexo3-2-github搭建静态博客.html" target="_blank" rel="noopener">https://chaoo.oschina.io/2016/05/23/Hexo3-2-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html</a></li><li><a href="https://www.jianshu.com/p/77db3862595c" target="_blank" rel="noopener">https://www.jianshu.com/p/77db3862595c</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;安装node&quot;&gt;&lt;a href=&quot;#安装node&quot; class=&quot;headerlink&quot; title=&quot;安装node&quot;&gt;&lt;/a&gt;安装node&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;直接网站下载，安装=&amp;gt;&lt;a href=&quot;https://n
      
    
    </summary>
    
      <category term="github+hexo" scheme="https://agclyy.github.io/categories/github-hexo/"/>
    
    
      <category term="hexo" scheme="https://agclyy.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
