[{"title":"redis 部署","date":"2019-05-03T03:57:08.000Z","path":"2019/05/03/redis-部署/","text":"1、下载安装​ 可直接官网下载 ： https://redis.io/download ​ 目前最新稳定版本是：redis-5.0.4 1234[root@localhost test]# wget http://download.redis.io/releases/redis-5.0.4.tar.gz[root@localhost test]# tar xzf redis-5.0.4.tar.gz[root@localhost test]# cd redis-5.0.4/[root@localhost test]# make 2、启动测试1[root@localhost redis-5.0.4]# ./src/redis-server ​ 再启动一个终端，进行客户端的连接测试 123456[root@localhost src]# ./redis-cli 127.0.0.1:6379&gt; set test aaOK127.0.0.1:6379&gt; get test\"aa\"127.0.0.1:6379&gt; 3、常见问题 异常一 1make[2]: cc: Command not found 异常原因：没有安装gcc 解决方案：yum install gcc-c++ 异常二 1zmalloc.h:51:31: error:jemalloc/jemalloc.h: No such file or directory 异常原因：一些编译依赖或原来编译遗留出现的问题 解决方案：make distclean。清理一下，然后再make. 异常三 在make成功以后，需要make test。在make test出现异常。couldn’t execute “tclsh8.5”: no such file or directory 异常原因：没有安装tcl 解决方案：yum install -y tcl。 redis安装依赖包包括：gcc，jemalloc，tcl，cloog-ppl，cpp，mpfr，ppl 4、哨兵模式配置​ copy三份redis.conf的配置，主节点配置文件 12345678910111213bind 0.0.0.0 #使非本机可以访问protected-mode no #保护模式关闭，3.2版本之前的注释该行port 6379 #访问端口daemonize yes #redis启动后台运行pidfile \"/var/run/redis_6379.pid\" #后台启动时将pid写入文件databases 16 #数据库个数默认16dir \"/apps/svr/test/redis-5.0.4\" #数据文件保持地址# slaveof &lt;masterip&gt; &lt;masterport&gt;#设置主节点的ip,端口# masterauth &lt;master-password&gt;masterauth \"testpassword\" #主备通信时告诉备需要密码requirepass \"testpassword\" #设置登陆需要的密码 ​ 从节点配置文件 123456789101112131415bind 0.0.0.0 #使非本机可以访问protected-mode no #保护模式关闭，3.2版本之前的注释该行port 6380 #访问端口daemonize yes #redis启动后台运行pidfile \"/var/run/redis_6380.pid\" #后台启动时将pid写入文件databases 16 #数据库个数默认16dir \"/apps/svr/test/redis-5.0.4\" #数据文件保持地址# slaveof &lt;masterip&gt; &lt;masterport&gt;slaveof 127.0.0.1 6379#slave-read-only yes#设置主节点的ip,端口# masterauth &lt;master-password&gt;masterauth \"testpassword\" #主备通信时告诉备需要密码requirepass \"testpassword\" #设置登陆需要的密码 配置好以后，启动redis 12345678[root@localhost redis-5.0.4]# nohup ./src/redis-server redis_6381.conf[root@localhost redis-5.0.4]# ps aux|grep redisroot 37286 0.0 0.0 60696 2000 ? Ss 14:01 0:00 sudo -u redis redis-server /etc/redis.confsystemd+ 37438 0.2 0.0 43712 5724 ? Sl 14:01 0:00 redis-server *:6379root 38153 0.1 0.0 156440 5188 pts/0 Sl 14:02 0:00 ./src/redis-server 127.0.0.1:6379root 38607 0.1 0.0 156440 8064 ? Ssl 14:02 0:00 ./src/redis-server 127.0.0.1:6380root 38781 0.0 0.0 156440 9876 ? Ssl 14:02 0:00 ./src/redis-server 127.0.0.1:6381root 38935 0.0 0.0 112704 964 pts/0 S+ 14:03 0:00 grep --color=auto redis 查看启动后主节点信息 12345678[root@localhost redis-5.0.4]# ./src/redis-cli -h 127.0.0.1 -p 6379 127.0.0.1:6379&gt; auth testpasswordOK127.0.0.1:6379&gt; get test(nil)127.0.0.1:6379&gt; set test aaOK127.0.0.1:6379&gt; info info输入后我们可以看到这样的输出 12345678910111213# Replicationrole:masterconnected_slaves:2slave0:ip=127.0.0.1,port=6380,state=online,offset=376,lag=1slave1:ip=127.0.0.1,port=6381,state=online,offset=376,lag=1master_replid:63e7bfb237d100f9f68b1342a71b10ce31f5a380master_replid2:0000000000000000000000000000000000000000master_repl_offset:376second_repl_offset:-1repl_backlog_active:1repl_backlog_size:1048576repl_backlog_first_byte_offset:1repl_backlog_histlen:376 可以看到role是master 两个slaves 主、从节点sentinel配置文件 123456protected-mode no #3.2版本之前的注释该行port 26379#sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;#主redis地址端口 #设置访问密码sentinel monitor mymaster 127.0.0.1 6379 2 sentinel auth-pass mymaster testpassword 启动sentinel，查看 123[root@localhost redis-5.0.4]# ./src/redis-sentinel sentinel_6379.conf &amp;[root@localhost redis-5.0.4]# ./src/redis-sentinel sentinel_6380.conf &amp;[root@localhost redis-5.0.4]# ./src/redis-sentinel sentinel_6381.conf &amp; 报错No such master with specified name 原来我配置文件的位置弄错了，下面两句的配置需要放在 sentinel.conf的大致位置如下，之前我直接配置在了文件最末端 sentinel monitor mymaster 127.0.0.1 6379 2sentinel auth-pass mymaster testpassword 12345678910111213141516171819# sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;## Number of milliseconds the master (or any attached replica or sentinel) should# be unreachable (as in, not acceptable reply to PING, continuously, for the# specified period) in order to consider it in S_DOWN state (Subjectively# Down).## Default is 30 seconds.sentinel monitor mymaster 127.0.0.1 6379 2# sentinel parallel-syncs &lt;master-name&gt; &lt;numreplicas&gt;## How many replicas we can reconfigure to point to the new replica simultaneously# during the failover. Use a low number if you use the replicas to serve query# to avoid that all the replicas will be unreachable at about the same# time while performing the synchronization with the master.sentinel auth-pass mymaster testpassword# sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt; 访问sentinel 123456789[root@localhost redis-5.0.4]# ./src/redis-cli -p 26379127.0.0.1:26379&gt; info# Sentinelsentinel_masters:1sentinel_tilt:0sentinel_running_scripts:0sentinel_scripts_queue_length:0sentinel_simulate_failure_flags:0master0:name=mymaster,status=ok,address=127.0.0.1:6379,slaves=2,sentinels=3 可以测试kill主节点，你会发现其中的一个slave变成了master,配置文件的内容也会跟着发生变化 再启动曾经的master，会自动成为新的master的slave ，配置文件也会更新 配置主从 新旧版本配置不一样 具体查看redis官网 新版本为：replicaof 127.0.0.1 6379 旧版本为: slaveof 127.0.0.1 6379 之前配置的是slaveof ，自动修改后成为了 replicaof 127.0.0.1 6380 5、参考链接&amp;鸣谢 https://blog.csdn.net/wuliusir/article/details/51598029 https://blog.csdn.net/gzh0222/article/details/8482525 https://www.cnblogs.com/PatrickLiu/p/8444546.html https://www.cnblogs.com/jaycekon/p/6237562.html https://blog.csdn.net/weixin_42711549/article/details/83061052","tags":[{"name":"redis","slug":"redis","permalink":"https://agclyy.github.io/tags/redis/"}]},{"title":"github + hexo 搭建个人网站","date":"2019-05-02T12:26:37.000Z","path":"2019/05/02/github-hexo-搭建个人网站/","text":"安装node 直接网站下载，安装=&gt;https://nodejs.org/en/download/ 安装hexo 直接命令 简单快捷：npm install -g hexo-cli 但在我电脑上因为权限出现了错误，fail to execute 。。。修改后命令如下 修改命令为=&gt; npm install -g hexo-cli –unsafe-perm github上注册账号 网址：https://github.com/ 具体如何注册这边就不阐述了 然后创建一个respository 注册名.github.io 必须这样命名 例如我的是agclyy.github.io 接下来就是一路的hexo的命令了，这边为了网站数据不丢失，创建了develop分支，用来存放所有数据 新建立一个目录，之后的博客都存储与这里： 家目录下执行： 12345$ mkdir gitblog $ cd gitblog$ git clone -b develop https://github.com/agclyy/agclyy.github.io.git 然后在该目录下创建blog，之后生成的blog文章都存储于此 123456$ mkdir blog$ cd blog$ hexo init$ npm install$ hexo generate$ hexo server 终端输出这些信息就说明OK了,浏览器可以输入，页面就出来啦 12INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. Hexo配置用编辑器打开 blog/ 下的配置文件_config.yml找到： 12345# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: repository: 到GitHub的 注册名.github.io仓库下，点击Clone or download,复制里面的HTTPS地址到repository:，添加branch: master。 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: https://github.com/注册名/注册名.github.io.git branch: master 完成部署最后一步，快要成功了，键入指令： 123$ npm install hexo-deployer-git --save$ hexo generate$ hexo deploy 每次修改本地文件后，需要键入hexo generate才能保存，再键入hexo deploy上传文件。成功之后命令行输出大概是这样：INFO Deploy done: git 将所有文件提交到git上的develop分支 123$ git add .$ git commit -m \"...\"$ git push origin develop 书写文章之后书写文章只需要执行new命令，生成指定名称的文章至 blog\\source_posts\\文章标题.md 。 1$ hexo new \"文章标题\" #新建文章 参考资料&amp;鸣谢： https://chaoo.oschina.io/2016/05/23/Hexo3-2-github%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html https://www.jianshu.com/p/77db3862595c","tags":[{"name":"hexo","slug":"hexo","permalink":"https://agclyy.github.io/tags/hexo/"}]}]